[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "list2cmdline",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "lexers",
        "importPath": "sphinx.highlighting",
        "description": "sphinx.highlighting",
        "isExtraImport": true,
        "detail": "sphinx.highlighting",
        "documentation": {}
    },
    {
        "label": "PhpLexer",
        "importPath": "pygments.lexers.web",
        "description": "pygments.lexers.web",
        "isExtraImport": true,
        "detail": "pygments.lexers.web",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "mbbank",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mbbank",
        "description": "mbbank",
        "detail": "mbbank",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CLANG_FORMAT_VERSION",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "CLANG_FORMAT_VERSION = '18.1.6'\nINCLUDE_REGEX = re.compile(r'^ext/.*\\.(c|h|inl)$')\nEXCLUDE_REGEX = re.compile(r'^$')\narg_parser = argparse.ArgumentParser(description=\"Check with clang-format\")\narg_parser.add_argument('-i', '--inplace-edit', action='store_true',\n                        help=\"Edit files inplace\")\nargs = arg_parser.parse_args()\nos.chdir(Path(__file__).parent)\n# create file containing list of all files to format\nfilepaths_file = NamedTemporaryFile(delete=False)",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "INCLUDE_REGEX",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "INCLUDE_REGEX = re.compile(r'^ext/.*\\.(c|h|inl)$')\nEXCLUDE_REGEX = re.compile(r'^$')\narg_parser = argparse.ArgumentParser(description=\"Check with clang-format\")\narg_parser.add_argument('-i', '--inplace-edit', action='store_true',\n                        help=\"Edit files inplace\")\nargs = arg_parser.parse_args()\nos.chdir(Path(__file__).parent)\n# create file containing list of all files to format\nfilepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_REGEX",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "EXCLUDE_REGEX = re.compile(r'^$')\narg_parser = argparse.ArgumentParser(description=\"Check with clang-format\")\narg_parser.add_argument('-i', '--inplace-edit', action='store_true',\n                        help=\"Edit files inplace\")\nargs = arg_parser.parse_args()\nos.chdir(Path(__file__).parent)\n# create file containing list of all files to format\nfilepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "arg_parser",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "arg_parser = argparse.ArgumentParser(description=\"Check with clang-format\")\narg_parser.add_argument('-i', '--inplace-edit', action='store_true',\n                        help=\"Edit files inplace\")\nargs = arg_parser.parse_args()\nos.chdir(Path(__file__).parent)\n# create file containing list of all files to format\nfilepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "args = arg_parser.parse_args()\nos.chdir(Path(__file__).parent)\n# create file containing list of all files to format\nfilepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "filepaths_file",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n        if EXCLUDE_REGEX.match(filepath):\n            continue\n        filepaths_file.write(f\"{filepath}\\n\".encode())",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "backend.vendor.aws.aws-crt-php.format-check",
        "description": "backend.vendor.aws.aws-crt-php.format-check",
        "peekOfCode": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n    exit(1)",
        "detail": "backend.vendor.aws.aws-crt-php.format-check",
        "documentation": {}
    },
    {
        "label": "#needs_sphinx",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.todo',\n    'sphinx_rtd_theme',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.todo',\n    'sphinx_rtd_theme',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.6'",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "project = u'Mockery Docs'\ncopyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.6.x'",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "copyright = u'Pádraic Brady, Dave Marshall and contributors'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.6.x'\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "version = '1.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.6.x'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "release = '1.6.x'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#language",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "exclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#add_module_names",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#show_authors",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#modindex_common_prefix",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#keep_warnings",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#keep_warnings = False\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "html_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_path",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_theme_path = []\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_extra_path",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_domain_indices",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sphinx",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_copyright",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "htmlhelp_basename = 'MockeryDocsdoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "latex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'MockeryDocs.tex', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_pagerefs",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_urls",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_domain_indices",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "man_pages = [\n    ('index', 'mockerydocs', u'Mockery Docs Documentation',\n     [u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#man_show_urls",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "texinfo_documents = [\n  ('index', 'MockeryDocs', u'Mockery Docs Documentation',\n   u'Pádraic Brady, Dave Marshall, Wouter, Graham Campbell', 'MockeryDocs', 'One line description of project.',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_appendices",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_domain_indices",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_show_urls",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print(sphinx_rtd_theme.get_html_theme_path())",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_no_detailmenu",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "#texinfo_no_detailmenu = False\n#on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print(sphinx_rtd_theme.get_html_theme_path())\n# load PhpLexer\nfrom sphinx.highlighting import lexers",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "on_rtd",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    print(sphinx_rtd_theme.get_html_theme_path())\n# load PhpLexer\nfrom sphinx.highlighting import lexers\nfrom pygments.lexers.web import PhpLexer\n# enable highlighting for PHP code not between <?php ... ?> by default",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "lexers['php']",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "lexers['php'] = PhpLexer(startinline=True)\nlexers['php-annotations'] = PhpLexer(startinline=True)",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "lexers['php-annotations']",
        "kind": 5,
        "importPath": "backend.vendor.mockery.mockery.docs.conf",
        "description": "backend.vendor.mockery.mockery.docs.conf",
        "peekOfCode": "lexers['php-annotations'] = PhpLexer(startinline=True)",
        "detail": "backend.vendor.mockery.mockery.docs.conf",
        "documentation": {}
    },
    {
        "label": "predict_image_array",
        "kind": 2,
        "importPath": "Python.AI.app",
        "description": "Python.AI.app",
        "peekOfCode": "def predict_image_array(img_array: np.ndarray) -> bool:\n    img_array = tf.cast(img_array, tf.float32) / 255.0\n    img_array = tf.expand_dims(img_array, axis=0)\n    prediction = model.predict(img_array)[0][0]\n    return prediction < 0.5  # True nếu là NSFW\n@app.post(\"/nsfw_detect\")\nasync def predict_from_multiple_urls(request: Request):\n    data = await request.json()\n    urls = data.get(\"images\", [])\n    if not isinstance(urls, list) or not urls:",
        "detail": "Python.AI.app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Python.AI.app",
        "description": "Python.AI.app",
        "peekOfCode": "model = load_model(\"nsfw.h5\")\n# Cấu hình FastAPI\napp = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "Python.AI.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Python.AI.app",
        "description": "Python.AI.app",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Hàm tải ảnh từ URL\nasync def load_image_from_url(url: str) -> np.ndarray:",
        "detail": "Python.AI.app",
        "documentation": {}
    },
    {
        "label": "readFile",
        "kind": 2,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "def readFile():\n    with open(\"data.txt\",\"r\") as f:\n        text = f.read().split(\"\\n\")\n        return text\ndef writeFile(data):\n    with open(\"data.txt\",\"w\") as f:\n        for i in range(0,len(data[\"transactionHistoryList\"])):\n            if (data[\"transactionHistoryList\"][i][\"debitAmount\"] == \"0\"):\n                f.write(data[\"transactionHistoryList\"][i][\"refNo\"])\n                if i != len(data[\"transactionHistoryList\"]) -1:",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "writeFile",
        "kind": 2,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "def writeFile(data):\n    with open(\"data.txt\",\"w\") as f:\n        for i in range(0,len(data[\"transactionHistoryList\"])):\n            if (data[\"transactionHistoryList\"][i][\"debitAmount\"] == \"0\"):\n                f.write(data[\"transactionHistoryList\"][i][\"refNo\"])\n                if i != len(data[\"transactionHistoryList\"]) -1:\n                    f.write(\"\\n\")\ndef callback(data, url):\n    try:\n        # Gửi yêu cầu POST với dữ liệu JSON",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "def callback(data, url):\n    try:\n        # Gửi yêu cầu POST với dữ liệu JSON\n        response = requests.post(url, json=data,headers=headers)\n        # Kiểm tra nếu yêu cầu thành công (mã trạng thái 200)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            return False\n    except requests.exceptions.RequestException as e:",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "def run(mb):\n    daynow = datetime.datetime.now()\n    lasttime = daynow - datetime.timedelta(days=10) # maximum\n    data = mb.getTransactionAccountHistory(from_date=lasttime, to_date=daynow)\n    # print(data)\n    # Lấy lsgd\n    lastestData = []\n    # Viết lsgd vào file \n    with open(\"a.json\", \"w\") as json_file:\n        json.dump(data, json_file,indent=4)",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "def test(mb):\n    while True:\n        try:\n            run(mb)\n        except Exception as e:\n            # Thiết lập lại kết nối\n            mb = mbbank.MBBank(username=\"0838411897\", password=\"Sqrtflo@to1\")\nif __name__ == \"__main__\":\n    mb = mbbank.MBBank(username=\"0838411897\", password=\"Sqrtflo@to1\")\n    test(mb)",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "accountNo",
        "kind": 5,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "accountNo = os.getenv(\"ACCOUNT_NO\")\npassword = os.getenv(\"PASSWORD\")\nurl = os.getenv(\"CALLBACK_URL\")\nheaders = {\n    \"Authorization\": \"Bearer Sqrtfl0@t01bfkskvqfayl0AnChimTo18cm\",\n    \"Content-Type\": \"application/json\"\n}\ndef readFile():\n    with open(\"data.txt\",\"r\") as f:\n        text = f.read().split(\"\\n\")",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "password = os.getenv(\"PASSWORD\")\nurl = os.getenv(\"CALLBACK_URL\")\nheaders = {\n    \"Authorization\": \"Bearer Sqrtfl0@t01bfkskvqfayl0AnChimTo18cm\",\n    \"Content-Type\": \"application/json\"\n}\ndef readFile():\n    with open(\"data.txt\",\"r\") as f:\n        text = f.read().split(\"\\n\")\n        return text",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "url = os.getenv(\"CALLBACK_URL\")\nheaders = {\n    \"Authorization\": \"Bearer Sqrtfl0@t01bfkskvqfayl0AnChimTo18cm\",\n    \"Content-Type\": \"application/json\"\n}\ndef readFile():\n    with open(\"data.txt\",\"r\") as f:\n        text = f.read().split(\"\\n\")\n        return text\ndef writeFile(data):",
        "detail": "Python.Transactions.app",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Python.Transactions.app",
        "description": "Python.Transactions.app",
        "peekOfCode": "headers = {\n    \"Authorization\": \"Bearer Sqrtfl0@t01bfkskvqfayl0AnChimTo18cm\",\n    \"Content-Type\": \"application/json\"\n}\ndef readFile():\n    with open(\"data.txt\",\"r\") as f:\n        text = f.read().split(\"\\n\")\n        return text\ndef writeFile(data):\n    with open(\"data.txt\",\"w\") as f:",
        "detail": "Python.Transactions.app",
        "documentation": {}
    }
]