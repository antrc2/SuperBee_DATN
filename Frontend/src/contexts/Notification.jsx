import React, { createContext, useContext, useEffect, useRef } from "react";
import { getSocket } from "../utils/socket"; //  utils/socket.js
import { useAuth } from "./AuthContext";
import { useNotification } from "./NotificationContext";
import { useHome } from "./HomeContext";

// Context n√†y kh√¥ng c·∫ßn cung c·∫•p gi√° tr·ªã ra ngo√†i, n√≥ ch·ªâ l√† m·ªôt tr√¨nh l·∫Øng nghe ch·∫°y ng·∫ßm.
const NotificationListenerContext = createContext();

/**
 * Component Provider n√†y c√≥ nhi·ªám v·ª• duy nh·∫•t:
 * L·∫Øng nghe s·ª± ki·ªán notification t·ª´ Socket.IO v√† hi·ªÉn th·ªã n√≥ ra m√†n h√¨nh b·∫±ng h√†m `pop`.
 */
export function NotificationListenerProvider({ children }) {
  const { isLoggedIn } = useAuth();
  // L·∫•y h√†m `pop` t·ª´ m·ªôt context kh√°c chuy√™n v·ªÅ hi·ªÉn th·ªã UI
  const { pop } = useNotification();
  const socketRef = useRef(null);
  const { setNotifications } = useHome();

  useEffect(() => {
    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng l√†m g√¨ c·∫£
    if (!isLoggedIn || !pop) {
      return;
    }

    const socket = getSocket();
    socketRef.current = socket;
    const public_notifications = (data) => {
      const message = data.data.content ?? "kh√¥ng x√°c ƒë·ªãnh";
      pop(message, "s");
      setNotifications((prevNotifications) => {
        const newNotificationsToAdd = data.data;
        const updatedNotificationsArray = [
          newNotificationsToAdd,
          ...prevNotifications.notifications,
        ];

        const updatedCount = prevNotifications.count + 1;
        return {
          count: updatedCount,
          notifications: updatedNotificationsArray,
        };
      });
    };
    const private_notifications = (data) => {
      const message = data.data.content ?? "kh√¥ng x√°c ƒë·ªãnh";
      pop(message, "s");
      setNotifications((prevNotifications) => {
        const newNotificationsToAdd = data.data;
        const updatedNotificationsArray = [
          newNotificationsToAdd,
          ...prevNotifications.notifications,
        ];
        const updatedCount = prevNotifications.count + 1;
        return {
          count: updatedCount,
          notifications: updatedNotificationsArray,
        };
      });
    };
    // H√†m x·ª≠ l√Ω khi c√≥ th√¥ng b√°o m·ªõi
    const handleNewNotification = (payload) => {
      console.log("üöÄ ~ handleNewNotification ~ payload:", payload);

      const newNotification = payload.data;
      if (!newNotification || !newNotification.content) return;

      console.log("Nh·∫≠n ƒë∆∞·ª£c Alert:", newNotification);

      // S·ª¨ D·ª§NG SWITCH-CASE ƒê·ªÇ QUY·∫æT ƒê·ªäNH LO·∫†I ALERT
      // D·ª±a v√†o `newNotification.type` t·ª´ Laravel
      let alertType = "info"; // M·∫∑c ƒë·ªãnh l√† 'info'
      switch (newNotification.type) {
        case 1: // Khuy·∫øn m√£i - Gi·∫£m gi√°
          alertType = "success";
          break;
        case 2: // B·∫£o tr√¨ h·ªá th·ªëng
          alertType = "warning";
          break;
        case 3: // S·ª± ki·ªán to√†n h·ªá th·ªëng
          alertType = "info";
          break;
        case 4: // C·∫£nh b√°o
          alertType = "error";
          break;
        case 5: // Tin nh·∫Øn t·ª´ Admin / Quy ƒë·ªãnh m·ªõi
          alertType = "default";
          break;
        default:
          alertType = "info";
          break;
      }

      // G·ªçi h√†m `pop` ƒë·ªÉ hi·ªÉn th·ªã alert v·ªõi n·ªôi dung v√† lo·∫°i t∆∞∆°ng ·ª©ng
      pop(newNotification.content, alertType);
    };

    // L·∫Øng nghe s·ª± ki·ªán t·ª´ server Node.js
    socket.on("private_notifications", private_notifications);
    socket.on("public_notifications", public_notifications);

    // Tham gia ph√≤ng chung ƒë·ªÉ nh·∫≠n tin c√¥ng khai
    socket.emit("join_room", "public_notifications");

    // D·ªçn d·∫πp khi component unmount
    return () => {
      socket.off("private_notifications", handleNewNotification);
      socket.off("public_notifications", handleNewNotification);
      socket.emit("leave_room", "public_notifications");
    };
  }, [isLoggedIn, pop]); // Effect ch·∫°y l·∫°i khi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ho·∫∑c h√†m `pop` thay ƒë·ªïi
  const value = {};

  // V√¨ Provider n√†y ch·ªâ l·∫Øng nghe, n√≥ kh√¥ng c·∫ßn cung c·∫•p gi√° tr·ªã n√†o, ch·ªâ c·∫ßn render children
  return (
    <NotificationListenerContext.Provider value={value}>
      {children}
    </NotificationListenerContext.Provider>
  );
}
