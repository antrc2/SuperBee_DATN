// ChatComponent.jsx
import React, { useState, useEffect, useRef } from "react";
import { useChat } from "@contexts/ChatContext"; // ƒê√£ ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
import { useAuth } from "@contexts/AuthContext"; // ƒê√£ ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
import { v4 as uuidv4 } from "uuid"; // ƒê·ªÉ t·∫°o ID duy nh·∫•t cho m·ªói tin nh·∫Øn client-side

// ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√†i ƒë·∫∑t uuid: npm install uuid

const ChatComponent = () => {
  // Bi·∫øn 'chatMessages' n√†y ƒë√£ ch·ª©a v√† hi·ªÉn th·ªã l·ªãch s·ª≠ chat.
  // N√≥ ƒë∆∞·ª£c cung c·∫•p t·ª´ ChatContext v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi c√≥ tin nh·∫Øn m·ªõi t·ª´ server.
  const { chatMessages, sendChatMessage } = useChat();
  console.log("üöÄ ~ ChatComponent ~ chatMessages:", chatMessages);
  const { user } = useAuth(); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ AuthContext
  const [newMessage, setNewMessage] = useState("");
  const messagesEndRef = useRef(null); // Ref ƒë·ªÉ cu·ªôn ƒë·∫øn cu·ªëi danh s√°ch tin nh·∫Øn

  // Cu·ªôn xu·ªëng cu·ªëi danh s√°ch tin nh·∫Øn m·ªói khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatMessages]);

  const handleSendMessage = () => {
    // Ki·ªÉm tra tin nh·∫Øn kh√¥ng r·ªóng V√Ä user ID t·ªìn t·∫°i
    if (newMessage.trim()) {
      // T·∫°o m·ªôt ID duy nh·∫•t cho tin nh·∫Øn n√†y ·ªü ph√≠a client
      const messageId = uuidv4();

      // Payload ƒë·ªÉ g·ª≠i ƒë·∫øn server
      // chatRoomId c·∫ßn ƒë∆∞·ª£c qu·∫£n l√Ω t·ª´ ph√≠a server ho·∫∑c context n·∫øu c√≥ nhi·ªÅu ph√≤ng chat.
      // ·ªû ƒë√¢y, t√¥i s·∫Ω d√πng m·ªôt placeholder ho·∫∑c gi·∫£ ƒë·ªãnh n√≥ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi server.
      // D·ª±a v√†o lu·ªìng b·∫°n m√¥ t·∫£, server s·∫Ω t√¨m/t·∫°o chatRoomId.
      // Client ch·ªâ c·∫ßn g·ª≠i n·ªôi dung v√† ng∆∞·ªùi g·ª≠i.
      const messagePayload = {
        id: messageId, // ID duy nh·∫•t cho tin nh·∫Øn n√†y (ƒë·ªÉ server c√≥ th·ªÉ x√°c nh·∫≠n ACK)
        content: newMessage.trim(),
        sender_id: 6, // S·ª≠a l·∫°i: ID c·ªßa ng∆∞·ªùi g·ª≠i L·∫§Y T·ª™ user?.id
        // chat_room_id: 'your_current_chat_room_id', // N·∫øu b·∫°n ƒëang trong m·ªôt ph√≤ng chat c·ª• th·ªÉ, h√£y truy·ªÅn ID v√†o ƒë√¢y
        // N·∫øu kh√¥ng, server s·∫Ω x√°c ƒë·ªãnh ho·∫∑c t·∫°o m·ªõi.
      };

      sendChatMessage(messagePayload); // G·ªçi h√†m g·ª≠i tin nh·∫Øn t·ª´ ChatContext
      setNewMessage(""); // X√≥a n·ªôi dung textarea sau khi g·ª≠i
    } else if (!user?.id) {
      // Ch·ªâ hi·ªÉn th·ªã c·∫£nh b√°o n√†y khi user?.id kh√¥ng t·ªìn t·∫°i
      console.warn(
        "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i tin nh·∫Øn ho·∫∑c user ID kh√¥ng kh·∫£ d·ª•ng."
      );
      // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng tr√™n UI
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i tin nh·∫Øn.");
    }
    // N·∫øu tin nh·∫Øn r·ªóng nh∆∞ng user?.id c√≥, kh√¥ng l√†m g√¨ c·∫£
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      // G·ª≠i khi nh·∫•n Enter, kh√¥ng g·ª≠i khi nh·∫•n Shift + Enter (xu·ªëng d√≤ng)
      e.preventDefault(); // NgƒÉn xu·ªëng d√≤ng m·∫∑c ƒë·ªãnh trong textarea
      handleSendMessage();
    }
  };

  return (
    <div className="flex flex-col min-h-[30rem] max-h-[45rem] bg-gray-100 p-4 rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-blue-700 mb-4 text-center">
        H·ªó Tr·ª£ Tr·ª±c Tuy·∫øn
      </h2>

      {/* V√πng hi·ªÉn th·ªã tin nh·∫Øn */}
      <div className="flex-1 bg-white p-4 rounded-lg overflow-y-auto shadow-inner mb-4">
        {chatMessages.length === 0 ? (
          <p className="text-gray-500 text-center py-10">
            Ch∆∞a c√≥ tin nh·∫Øn n√†o. B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán!
          </p>
        ) : (
          chatMessages.map((msg, index) => (
            <div
              key={msg.id || index} // S·ª≠ d·ª•ng msg.id n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng index (nh∆∞ng msg.id t·ªët h∆°n)
              className={`mb-2 p-2 rounded-lg max-w-[80%] ${
                msg.sender_id === user?.id // Gi·∫£ ƒë·ªãnh msg.sender_id l√† ID ng∆∞·ªùi g·ª≠i, so s√°nh v·ªõi user hi·ªán t·∫°i
                  ? "bg-blue-500 text-white self-end ml-auto"
                  : "bg-gray-300 text-gray-800 self-start mr-auto"
              }`}
            >
              <p className="font-semibold">
                {msg.sender_id === user?.id
                  ? "B·∫°n"
                  : `Ng∆∞·ªùi d√πng ${msg.sender_id || "kh√°c"}`}
                :
              </p>
              <p>{msg.content}</p>
              {msg.attachment_url && (
                <a
                  href={msg.attachment_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-200 underline"
                >
                  T·ªáp ƒë√≠nh k√®m
                </a>
              )}
              <span className="block text-xs mt-1 opacity-75">
                {new Date(msg.created_at || Date.now()).toLocaleTimeString()}
              </span>
            </div>
          ))
        )}
        <div ref={messagesEndRef} /> {/* D√πng ƒë·ªÉ cu·ªôn */}
      </div>

      {/* V√πng nh·∫≠p tin nh·∫Øn */}
      <div className="flex items-center space-x-2">
        <textarea
          className="flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none h-24"
          placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyDown={handleKeyDown}
        ></textarea>
        <button
          className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-300 ease-in-out"
          onClick={handleSendMessage}
        >
          G·ª≠i
        </button>
      </div>
    </div>
  );
};

export default ChatComponent;
