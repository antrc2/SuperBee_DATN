import React, { useState, useEffect, useMemo } from "react";
import {
    ShoppingCart,
    Tag,
    X,
    CreditCard,
    ShieldCheck,
    Gift,
    TicketPercent,
    ChevronRight,
    ListOrdered,
    FileText,
    Wallet,
    Landmark,
    Loader2,
} from "lucide-react";
import { useCart } from "@contexts/CartContext";
import { useNotification } from "@contexts/NotificationContext";
import { Link, useNavigate } from "react-router-dom";
import LoadingDomain from "@components/Loading/LoadingDomain";
import api from "@utils/http";
import { useAuth } from "../../../contexts/AuthContext";

// H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá kh√¥ng thay ƒë·ªïi
const formatCurrency = (amount) => {
    const numberAmount = Number(amount);
    if (isNaN(numberAmount)) return "0 ‚Ç´";
    return new Intl.NumberFormat("vi-VN", {
        style: "currency",
        currency: "VND",
    }).format(numberAmount);
};

// --- MODAL M√É GI·∫¢M GI√Å (Kh√¥ng thay ƒë·ªïi) ---
const DiscountModal = ({ isOpen, onClose, discounts, onApplyDiscount, appliedPromotionCode }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <div className="section-bg w-full max-w-lg max-h-[80vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-themed">
                    <h3 className="text-xl font-bold font-heading text-primary flex items-center">
                        <Gift size={24} className="mr-2 text-accent" />
                        M√£ Gi·∫£m Gi√° C·ªßa B·∫°n
                    </h3>
                    <button onClick={onClose} className="p-1 rounded-full text-secondary hover:text-primary hover:bg-white/10 transition-colors">
                        <X size={24} />
                    </button>
                </div>
                <div className="p-4 overflow-y-auto custom-scrollbar-notification">
                    {discounts.length === 0 ? (
                        <p className="text-secondary text-center py-8">B·∫°n kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o.</p>
                    ) : (
                        <ul className="space-y-3">
                            {discounts.map((discount) => (
                                <li
                                    key={discount.id}
                                    className={`selection-grid-item text-left p-4 ${
                                        appliedPromotionCode === discount.code ? "selection-grid-item-selected" : ""
                                    }`}
                                >
                                    <div className="flex justify-between items-start gap-4">
                                        <div className="flex-1">
                                            <div className="flex items-center mb-2">
                                                <TicketPercent size={20} className="mr-2 text-accent" />
                                                <span className="font-bold text-lg text-primary">{discount.code}</span>
                                                {appliedPromotionCode === discount.code && (
                                                    <span className="ml-3 text-xs bg-green-500/20 text-green-500 px-2 py-0.5 rounded-full font-semibold">
                                                        ƒêang √°p d·ª•ng
                                                    </span>
                                                )}
                                            </div>
                                            <p className="text-sm text-secondary mb-2">{discount.description || `Gi·∫£m ${discount.value}%`}</p>
                                            <div className="text-xs text-secondary/80 space-y-1 border-t border-themed pt-2 mt-2">
                                                <p>
                                                    HSD:{" "}
                                                    <span className="font-medium">
                                                        {discount.expiry === "N/A"
                                                            ? "V√¥ th·ªùi h·∫°n"
                                                            : new Date(discount.expiry).toLocaleDateDateString("vi-VN")}
                                                    </span>
                                                </p>
                                                {discount.min_discount_amount > 0 && (
                                                    <p>
                                                        ƒê∆°n t·ªëi thi·ªÉu:{" "}
                                                        <span className="font-medium">{formatCurrency(discount.min_discount_amount)}</span>
                                                    </p>
                                                )}
                                                {discount.max_discount_amount > 0 && (
                                                    <p>
                                                        Gi·∫£m t·ªëi ƒëa:{" "}
                                                        <span className="font-medium">{formatCurrency(discount.max_discount_amount)}</span>
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                        <button
                                            onClick={() => {
                                                onApplyDiscount(discount.code);
                                                onClose();
                                            }}
                                            disabled={appliedPromotionCode === discount.code}
                                            className="action-button action-button-primary text-sm !py-2 !px-4 self-center disabled:!bg-tertiary disabled:!text-primary/80 disabled:cursor-not-allowed disabled:filter-none disabled:transform-none"
                                        >
                                            {appliedPromotionCode === discount.code ? "ƒê√£ ch·ªçn" : "D√πng ngay"}
                                        </button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            </div>
        </div>
    );
};

// Component ch√≠nh
export default function Pay() {
    const { pop, conFim } = useNotification();
    const { fetchCartItems } = useCart();
    const [cartItemsPay, setCartItemsPay] = useState([]);
    const [userBalance, setUserBalance] = useState(0);
    const [promotionCodes, setPromotionCodes] = useState([]);
    const [discountCodeInput, setDiscountCodeInput] = useState("");
    const [appliedDiscount, setAppliedDiscount] = useState(null);
    const [showDiscountModal, setShowDiscountModal] = useState(false);
    const [termsAccepted, setTermsAccepted] = useState(false);
    const [loadingCheckout, setLoadingCheckout] = useState(true);
    const [discountErrorMessage, setDiscountErrorMessage] = useState("");
    const [isProcessingPayment, setIsProcessingPayment] = useState(false);

    const [backendRawTotalPrice, setBackendRawTotalPrice] = useState(0);
    const [backendTotalPriceAfterDiscount, setBackendTotalPriceAfterDiscount] = useState(0);
    const [backendTaxAmount, setBackendTaxAmount] = useState(0);
    const [backendTaxValue, setBackendTaxValue] = useState(0);
    const [backendRoleDiscountAmount, setBackendRoleDiscountAmount] = useState(0);
    const [backendRoleDiscountValue, setBackendRoleDiscountValue] = useState(0);

    const navigate = useNavigate();
    const { fetchUserMoney } = useAuth();

    // useEffect v√† c√°c h√†m x·ª≠ l√Ω kh√°c kh√¥ng thay ƒë·ªïi logic
    useEffect(() => {
        const fetchCheckoutData = async () => {
            setLoadingCheckout(true);
            try {
                const response = await api.get("/orders/checkout");
                if (response.data?.status) {
                    const items = response.data.carts
                        .filter((item) => item.status === 1)
                        .map((item) => {
                            console.log("üöÄ ~ fetchCheckoutData ~ item:", item);
                            return {
                                id: item.id,
                                product_id: item.product_id,
                                name: item.product?.sku || "S·∫£n ph·∫©m kh√¥ng t√™n",
                                image: item.product?.images?.[0]?.image_url || "https://placehold.co/100x100/E2E8F0/4A5568?text=S·∫£n+ph·∫©m",
                                price: parseFloat(item.unit_price) || 0,
                                old_price: parseFloat(item.product?.price) || 0,
                            };
                        });
                    setCartItemsPay(items);
                    setUserBalance(parseFloat(response.data.balance) || 0);
                    setBackendRawTotalPrice(parseFloat(response.data.total_price) || 0);
                    setBackendTotalPriceAfterDiscount(parseFloat(response.data.total_price_after_discount) || 0);
                    setBackendTaxAmount(parseFloat(response.data.tax_amount) || 0);
                    setBackendTaxValue(parseFloat(response.data.tax_value) || 0);
                    setBackendRoleDiscountAmount(parseFloat(response.data.discount_amount) || 0);
                    setBackendRoleDiscountValue(parseFloat(response.data.discount_value) || 0);
                    setPromotionCodes(
                        response.data.promotion_codes.map((promo) => ({
                            id: promo.id,
                            code: promo.code,
                            description: promo.description,
                            type: "percentage",
                            value: parseFloat(promo.discount_value) || 0,
                            expiry: promo.end_date || "N/A",
                            min_discount_amount: parseFloat(promo.min_discount_amount) || 0,
                            max_discount_amount: parseFloat(promo.max_discount_amount) || 0,
                            per_user_limit: parseInt(promo.per_user_limit) || -1,
                            usage_limit: parseInt(promo.usage_limit) || -1,
                        }))
                    );
                    setAppliedDiscount(null);
                    setDiscountCodeInput("");
                    setDiscountErrorMessage("");
                    if (items.length === 0) {
                        pop("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.", "info");
                        navigate("/cart");
                    }
                } else {
                    pop(response.data.message, "error");
                    navigate("/cart");
                }
            } catch (error) {
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu gi·ªè h√†ng:", error);
                const errorMessage = error.response?.data?.message || "L·ªói khi t·∫£i d·ªØ li·ªáu gi·ªè h√†ng.";
                pop(errorMessage, "error");
                navigate("/cart");
            } finally {
                setLoadingCheckout(false);
            }
        };

        fetchCheckoutData();
    }, [fetchCartItems, pop, navigate]);

    const { subtotalBeforeTax, finalAmount } = useMemo(() => {
        const subtotalBeforeTaxAndRoleDiscount = backendRawTotalPrice;
        let currentTotal = backendTotalPriceAfterDiscount;
        if (appliedDiscount) {
            currentTotal = appliedDiscount.total_price_after_discount;
        }
        return {
            subtotalBeforeTax: subtotalBeforeTaxAndRoleDiscount,
            finalAmount: currentTotal,
        };
    }, [backendRawTotalPrice, backendTotalPriceAfterDiscount, appliedDiscount]);

    const handleApplyDiscountCode = async (codeToApply = discountCodeInput) => {
        const code = codeToApply.trim().toUpperCase();
        if (!code) {
            setDiscountErrorMessage("Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°.");
            return;
        } else {
            setDiscountErrorMessage("");
        }
        if (!(await conFim(`B·∫°n mu·ªën √°p d·ª•ng m√£ gi·∫£m gi√° "${code}"?`))) return;
        try {
            const response = await api.post("/orders/check", {
                promotion_code: code,
            });
            if (response.data.status) {
                setAppliedDiscount({
                    code: response.data.promotion_code,
                    discount_amount: parseFloat(response.data.discount_amount) || 0,
                    discount_value: parseFloat(response.data.discount_value) || 0,
                    total_price_after_discount: parseFloat(response.data.total_price_after_discount) || 0,
                });
                setBackendTotalPriceAfterDiscount(parseFloat(response.data.total_price_after_discount) || 0);
                setBackendTaxAmount(parseFloat(response.data.tax_value) || 10);
                setBackendTaxValue(parseFloat(response.data.tax_amount) || 0);
                pop(response.data.message, "success");
                setDiscountCodeInput("");
                setDiscountErrorMessage("");
            } else {
                setAppliedDiscount(null);
                setDiscountErrorMessage(response.data.message);
                const checkoutResponse = await api.get("/orders/checkout");
                if (checkoutResponse.data?.status) {
                    setBackendTotalPriceAfterDiscount(parseFloat(checkoutResponse.data.total_price_after_discount) || 0);
                }
            }
        } catch (error) {
            console.error("L·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°:", error);
            const errorMessage = error.response?.data?.message || "L·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°.";
            setDiscountErrorMessage(errorMessage);
            setAppliedDiscount(null);
            try {
                const checkoutResponse = await api.get("/orders/checkout");
                if (checkoutResponse.data?.status) {
                    setBackendTotalPriceAfterDiscount(parseFloat(checkoutResponse.data.total_price_after_discount) || 0);
                }
            } catch (e) {
                console.error("Error reverting total price:", e);
            }
        }
    };

    const handleRemoveDiscount = async () => {
        if (!appliedDiscount) return;
        if (!(await conFim("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√£ gi·∫£m gi√°?"))) return;
        setAppliedDiscount(null);
        setDiscountCodeInput("");
        setDiscountErrorMessage("");
        try {
            const response = await api.get("/orders/checkout");
            if (response.data.status) {
                setBackendTotalPriceAfterDiscount(parseFloat(response.data.total_price_after_discount) || 0);
                pop("ƒê√£ x√≥a m√£ gi·∫£m gi√°.", "success");
            } else {
                pop("L·ªói khi kh√¥i ph·ª•c gi√° g·ªëc.", "error");
            }
        } catch (error) {
            console.error("L·ªói khi x√≥a m√£ gi·∫£m gi√°:", error);
            pop("L·ªói khi x√≥a m√£ gi·∫£m gi√°.", "error");
        }
    };

    const handlePayment = async () => {
        if (!termsAccepted) {
            pop("B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n v√† d·ªãch v·ª• tr∆∞·ªõc khi thanh to√°n.", "warning");
            return;
        }

        if (finalAmount > userBalance) {
            pop("S·ªë d∆∞ kh√¥ng ƒë·ªß. Vui l√≤ng n·∫°p th√™m ti·ªÅn.", "error");
            return;
        }

        setIsProcessingPayment(true);
        try {
            const response = await api.post("/orders/purchase", {
                promotion_code: appliedDiscount?.code || null,
            });
            if (response.data.status) {
                setUserBalance((prev) => prev - finalAmount);
                setCartItemsPay([]);
                setAppliedDiscount(null);
                pop(response.data.message, "success");
                await fetchCartItems();
                await fetchUserMoney();
                navigate("/info/orders");
            } else {
                pop(response.data.message, "error");
            }
        } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω thanh to√°n:", error);
            const errorMessage = error.response?.data?.message || "L·ªói khi x·ª≠ l√Ω thanh to√°n.";
            pop(errorMessage, "error");
        } finally {
            setIsProcessingPayment(false);
        }
    };

    if (loadingCheckout) return <LoadingDomain />;

    return (
        // 1. Th√™m class 'relative' v√†o container cha
        <div className="min-h-screen relative">
            {/* 2. Th√™m l·ªõp ph·ªß loading to√†n trang */}
            {isProcessingPayment && <LoadingDomain />}

            <div className="max-w-screen-xl mx-auto">
                <div className="breadcrumbs-container p-4">
                    <Link to="/" className="breadcrumb-link">
                        Trang ch·ªß
                    </Link>
                    <ChevronRight size={16} className="breadcrumb-separator" />
                    <Link to="/cart" className="breadcrumb-link">
                        Gi·ªè h√†ng
                    </Link>
                    <ChevronRight size={16} className="breadcrumb-separator" />
                    <span className="text-primary font-semibold">Thanh to√°n</span>
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
                    <div className="lg:col-span-3 space-y-8">
                        <div className="section-bg p-6">
                            <h2 className="text-xl font-bold font-heading mb-4 text-primary flex items-center">
                                <ListOrdered size={24} className="mr-3 text-accent" />
                                Xem l·∫°i ƒë∆°n h√†ng ({cartItemsPay.length})
                            </h2>
                            <div className="space-y-4 max-h-[400px] overflow-y-auto pr-2 custom-scrollbar-notification">
                                {cartItemsPay.map((item) => {
                                    return (
                                        <div key={item.id} className="flex items-center gap-4 bg-input p-3 rounded-lg border border-themed">
                                            <img src={item.image} alt={item.name} className="w-16 h-16 object-cover rounded-md shadow-sm" />
                                            <div className="flex-grow">
                                                <h3 className="font-semibold text-primary">{item.name}</h3>
                                                <p className="text-sm text-secondary">Gi√° g·ªëc: {formatCurrency(item.old_price)}</p>
                                            </div>
                                            <div className="text-right">
                                                <p className="font-semibold text-primary">{formatCurrency(item.price)}</p>
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    </div>
                    <div className="lg:col-span-2">
                        <div className="sticky top-24 space-y-8">
                            <div className="section-bg p-6">
                                <h2 className="text-xl font-bold font-heading mb-4 text-primary flex items-center">
                                    <Wallet size={24} className="mr-3 text-accent" />
                                    V√≠ c·ªßa b·∫°n
                                </h2>
                                <div
                                    className={`p-4 rounded-lg flex items-center justify-between gap-5 ${
                                        userBalance >= finalAmount ? "bg-tertiary/20" : "bg-red-500/10"
                                    }`}
                                >
                                    <div>
                                        <p className="text-sm text-secondary">S·ªë d∆∞ kh·∫£ d·ª•ng</p>
                                        <p className="text-2xl font-bold text-primary">{formatCurrency(userBalance)}</p>
                                    </div>
                                    {userBalance < finalAmount && (
                                        <Link to="/recharge-atm" className="action-button action-button-primary !py-2 !px-4 text-sm">
                                            <Landmark size={16} className="mr-2" />
                                            N·∫°p ti·ªÅn
                                        </Link>
                                    )}
                                </div>
                                {userBalance < finalAmount && (
                                    <p className="text-red-500 text-sm mt-2 font-semibold">S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán thanh to√°n.</p>
                                )}
                            </div>
                            <div className="section-bg p-6">
                                <h2 className="text-xl font-bold font-heading mb-4 text-primary flex items-center">
                                    <TicketPercent size={24} className="mr-3 text-accent" />
                                    M√£ gi·∫£m gi√°
                                </h2>
                                <div className="flex flex-col sm:flex-row gap-2">
                                    <input
                                        type="text"
                                        value={discountCodeInput}
                                        onChange={(e) => setDiscountCodeInput(e.target.value.toUpperCase())}
                                        placeholder="Nh·∫≠p m√£ c·ªßa b·∫°n ·ªü ƒë√¢y"
                                        className="flex-grow w-full bg-input text-input p-3 rounded-md border-hover placeholder-theme"
                                    />
                                    <button onClick={() => handleApplyDiscountCode()} className="action-button action-button-secondary !py-3 !px-6">
                                        √Åp d·ª•ng
                                    </button>
                                </div>
                                {discountErrorMessage && <p className="text-red-500 text-sm mt-2">{discountErrorMessage}</p>}
                                <div className="mt-3 flex justify-between items-center">
                                    <button
                                        onClick={() => setShowDiscountModal(true)}
                                        className="text-sm text-accent hover:brightness-125 font-medium"
                                    >
                                        Xem danh s√°ch m√£ gi·∫£m gi√°
                                    </button>
                                    {appliedDiscount && (
                                        <button onClick={handleRemoveDiscount} className="text-xs text-red-500 hover:underline flex items-center">
                                            <X size={12} className="mr-1" /> G·ª° m√£ "{appliedDiscount.code}"
                                        </button>
                                    )}
                                </div>
                            </div>
                            <div className="section-bg p-6">
                                <h2 className="text-xl font-bold font-heading mb-4 text-primary flex items-center">
                                    <FileText size={24} className="mr-3 text-accent" />
                                    T·ªïng k·∫øt thanh to√°n
                                </h2>
                                <div className="space-y-3 text-sm">
                                    <div className="flex items-center justify-between">
                                        <span className="text-secondary">Gi√° g·ªëc s·∫£n ph·∫©m</span>
                                        <div className="flex-grow border-b border-dashed border-themed mx-2"></div>
                                        <span className="font-medium text-primary">{formatCurrency(subtotalBeforeTax)}</span>
                                    </div>
                                    {backendRoleDiscountValue > 0 && (
                                        <div className="flex items-center justify-between text-tertiary">
                                            <span className="font-semibold">Chi·∫øt kh·∫•u h·∫°ng ({backendRoleDiscountValue}%)</span>
                                            <div className="flex-grow border-b border-dashed border-tertiary/50 mx-2"></div>
                                            <span className="font-semibold">-{formatCurrency(backendRoleDiscountAmount)}</span>
                                        </div>
                                    )}
                                    {appliedDiscount && (
                                        <div className="flex items-center justify-between text-accent">
                                            <span className="font-semibold">M√£ gi·∫£m gi√° "{appliedDiscount.code}"</span>
                                            <div className="flex-grow border-b border-dashed border-accent/50 mx-2"></div>
                                            <span className="font-semibold">-{formatCurrency(appliedDiscount.discount_amount)}</span>
                                        </div>
                                    )}
                                    {backendTaxAmount > 0 && (
                                        <div className="flex items-center justify-between">
                                            <span className="text-secondary">Thu·∫ø ({backendTaxValue}%)</span>
                                            <div className="flex-grow border-b border-dashed border-themed mx-2"></div>
                                            <span className="font-medium text-primary">+{formatCurrency(backendTaxAmount)}</span>
                                        </div>
                                    )}
                                </div>
                                <div className="border-t border-themed mt-4 pt-4">
                                    <div className="flex justify-between items-baseline">
                                        <span className="text-lg font-semibold text-primary">T·ªïng thanh to√°n</span>
                                        <span className="font-bold text-red-500 text-3xl">{formatCurrency(finalAmount)}</span>
                                    </div>
                                </div>
                            </div>

                            <div className="section-bg p-6">
                                <div className="mb-4">
                                    <label htmlFor="terms" className="flex items-start text-sm text-secondary cursor-pointer">
                                        <input
                                            type="checkbox"
                                            id="terms"
                                            checked={termsAccepted}
                                            onChange={(e) => setTermsAccepted(e.target.checked)}
                                            className="h-4 w-4 mr-3 mt-0.5 rounded"
                                        />
                                        <span>
                                            T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi c√°c{" "}
                                            <Link to="/tin-tuc/huong-dan/dieu-khoan-va-dich-vu" className="text-accent hover:underline font-medium">
                                                ƒëi·ªÅu kho·∫£n v√† d·ªãch v·ª•
                                            </Link>{" "}
                                            c·ªßa trang web.
                                        </span>
                                    </label>
                                </div>

                                {/* 3. Ho√†n nguy√™n n√∫t b·∫•m v·ªÅ tr·∫°ng th√°i g·ªëc, ch·ªâ gi·ªØ l·∫°i logic disabled */}
                                <button
                                    onClick={handlePayment}
                                    disabled={loadingCheckout || finalAmount > userBalance || cartItemsPay.length === 0 || isProcessingPayment}
                                    className="action-button action-button-primary w-full text-lg !py-4"
                                >
                                    <CreditCard className="inline-block mr-3" size={24} />
                                    X√°c nh·∫≠n & Thanh to√°n
                                </button>

                                <div className="mt-4 text-xs text-secondary text-center">
                                    <p className="flex items-center justify-center">
                                        <ShieldCheck size={14} className="mr-2 text-tertiary" />
                                        T·∫•t c·∫£ giao d·ªãch ƒë·ªÅu ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <DiscountModal
                isOpen={showDiscountModal}
                onClose={() => setShowDiscountModal(false)}
                discounts={promotionCodes}
                onApplyDiscount={handleApplyDiscountCode}
                appliedPromotionCode={appliedDiscount?.code}
            />
        </div>
    );
}
