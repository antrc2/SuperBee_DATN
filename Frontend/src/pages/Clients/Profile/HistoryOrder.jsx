import React, { useState, useEffect } from "react";
import api from "../../../utils/http";

// --- D·ªØ li·ªáu m·∫´u b·∫°n cung c·∫•p ---
// Trong th·ª±c t·∫ø, b·∫°n s·∫Ω l·∫•y d·ªØ li·ªáu n√†y t·ª´ API
const MOCK_API_RESPONSE = [
  {
    id: 2,
    user_id: 5,
    order_code: "435252452",
    total_amount: "345353",
    wallet_transaction_id: 2,
    status: 1, // 1: Ho√†n th√†nh, 0: ƒêang x·ª≠ l√Ω, 2: ƒê√£ h·ªßy
    promo_code: "453",
    discount_amount: "5345",
    created_at: "2025-06-13T10:06:27.000000Z",
    updated_at: "2025-06-13T10:06:28.000000Z",
    items: [
      {
        id: 2,
        order_id: 2,
        product_id: 14,
        unit_price: "555",
        product_name: "S·∫£n ph·∫©m A", // Gi·∫£ l·∫≠p th√™m t√™n s·∫£n ph·∫©m cho d·ªÖ nh√¨n
        product_image: "https://via.placeholder.com/100", // Gi·∫£ l·∫≠p ·∫£nh s·∫£n ph·∫©m
      },
      {
        id: 3,
        order_id: 2,
        product_id: 15,
        unit_price: "350143",
        product_name: "S·∫£n ph·∫©m B", // Gi·∫£ l·∫≠p th√™m t√™n s·∫£n ph·∫©m
        product_image: "https://via.placeholder.com/100", // Gi·∫£ l·∫≠p ·∫£nh s·∫£n ph·∫©m
      },
    ],
  },
  // Th√™m m·ªôt ƒë∆°n h√†ng kh√°c ƒë·ªÉ test filter
  {
    id: 3,
    user_id: 5,
    order_code: "888999111",
    total_amount: "150000",
    wallet_transaction_id: 3,
    status: 0, // ƒêang x·ª≠ l√Ω
    promo_code: null,
    discount_amount: "0",
    created_at: "2025-06-12T11:30:00.000000Z",
    updated_at: "2025-06-12T11:30:00.000000Z",
    items: [
      {
        id: 4,
        order_id: 3,
        product_id: 25,
        unit_price: "150000",
        product_name: "S·∫£n ph·∫©m C",
        product_image: "https://via.placeholder.com/100",
      },
    ],
  },
];

// --- C√°c h√†m ti·ªán √≠ch ---
const formatDate = (dateString) => {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

const formatCurrency = (amount) => {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(amount);
};

const renderStatus = (status) => {
  switch (status) {
    case 1:
      return (
        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
          Ho√†n th√†nh
        </span>
      );
    case 0:
      return (
        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
          ƒêang x·ª≠ l√Ω
        </span>
      );
    case 2:
      return (
        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
          ƒê√£ h·ªßy
        </span>
      );
    default:
      return (
        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
          Kh√¥ng x√°c ƒë·ªãnh
        </span>
      );
  }
};

// --- Component Modal chi ti·∫øt ƒë∆°n h√†ng ---
const OrderDetailModal = ({ order, onClose }) => {
  if (!order) return null;

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "Mua s·∫£n ph·∫©m t∆∞∆°ng t·ª±"
  const handleBuySimilar = (productId) => {
    console.log(`B·∫Øt ƒë·∫ßu qu√° tr√¨nh mua l·∫°i s·∫£n ph·∫©m c√≥ ID: ${productId}`);
    // T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang s·∫£n ph·∫©m
    // v√≠ d·ª•: window.location.href = `/products/${productId}`;
    alert(`Chuy·ªÉn ƒë·∫øn trang c·ªßa s·∫£n ph·∫©m ID: ${productId}`);
  };

  const subtotal = order.items.reduce(
    (sum, item) => sum + parseFloat(item.unit_price),
    0
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
        <div className="flex justify-between items-center p-4 border-b">
          <h3 className="text-xl font-bold">
            Chi ti·∫øt ƒë∆°n h√†ng: #{order.order_code}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-800 text-2xl"
          >
            &times;
          </button>
        </div>

        <div className="p-6 overflow-y-auto">
          <div className="mb-6">
            <h4 className="font-bold text-lg mb-2">Danh s√°ch s·∫£n ph·∫©m</h4>
            <ul className="divide-y divide-gray-200">
              {order.items.map((item) => (
                <li key={item.id} className="py-4 flex items-center">
                  <img
                    src={item.product_image}
                    alt={item.product_name}
                    className="h-16 w-16 object-cover rounded mr-4"
                  />
                  <div className="flex-grow">
                    <p className="font-semibold">{item.product_name}</p>
                    <p className="text-sm text-gray-600">
                      ID s·∫£n ph·∫©m: {item.product_id}
                    </p>
                    <p className="text-sm text-gray-800">
                      {formatCurrency(item.unit_price)}
                    </p>
                  </div>
                  <button
                    onClick={() => handleBuySimilar(item.product_id)}
                    className="ml-4 px-3 py-1 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600 whitespace-nowrap"
                  >
                    Mua l·∫°i
                  </button>
                </li>
              ))}
            </ul>
          </div>
          <div className="border-t pt-4">
            <h4 className="font-bold text-lg mb-2">T·ªïng k·∫øt</h4>
            <div className="space-y-2 text-right">
              <p>
                <span>T·∫°m t√≠nh:</span>{" "}
                <span className="font-medium">{formatCurrency(subtotal)}</span>
              </p>
              <p>
                <span>Gi·∫£m gi√° (M√£: {order.promo_code || "N/A"}):</span>{" "}
                <span className="font-medium text-red-500">
                  - {formatCurrency(order.discount_amount)}
                </span>
              </p>
              <p className="text-xl">
                <span>Th√†nh ti·ªÅn:</span>{" "}
                <span className="font-bold text-blue-600">
                  {formatCurrency(order.total_amount)}
                </span>
              </p>
            </div>
          </div>
        </div>

        <div className="p-4 border-t text-right bg-gray-50">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
          >
            ƒê√≥ng
          </button>
        </div>
      </div>
    </div>
  );
};

// --- Component ch√≠nh ---
export default function HistoryOrder() {
  const [allOrders, setAllOrders] = useState([]);
  const [filteredOrders, setFilteredOrders] = useState([]);
  const [filters, setFilters] = useState({
    search: "",
    status: "all",
    startDate: "",
    endDate: "",
  });
  const [selectedOrder, setSelectedOrder] = useState(null);

  // L·∫•y d·ªØ li·ªáu khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    // Gi·∫£ l·∫≠p API call
    const fetchOrders = async () => {
      const response = await api.get("/user/order");
      const data = response.data;
      console.log("üöÄ ~ fetchOrders ~ data:", data);
      //   const data = MOCK_API_RESPONSE;
      const sortedData = data.sort(
        (a, b) => new Date(b.created_at) - new Date(a.created_at)
      );
      setAllOrders(sortedData);
      setFilteredOrders(sortedData);
    };
    fetchOrders();
  }, []);

  // √Åp d·ª•ng b·ªô l·ªçc
  useEffect(() => {
    let result = allOrders;

    // L·ªçc theo m√£ ƒë∆°n h√†ng
    if (filters.search) {
      result = result.filter((order) =>
        order.order_code.includes(filters.search)
      );
    }

    // L·ªçc theo tr·∫°ng th√°i
    if (filters.status !== "all") {
      result = result.filter(
        (order) => order.status.toString() === filters.status
      );
    }

    // L·ªçc theo ng√†y
    if (filters.startDate) {
      result = result.filter(
        (t) => new Date(t.created_at) >= new Date(filters.startDate)
      );
    }
    if (filters.endDate) {
      const endDate = new Date(filters.endDate);
      endDate.setDate(endDate.getDate() + 1); // bao g·ªìm c·∫£ ng√†y k·∫øt th√∫c
      result = result.filter((t) => new Date(t.created_at) < endDate);
    }

    setFilteredOrders(result);
  }, [filters, allOrders]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const handleViewDetails = (order) => {
    setSelectedOrder(order);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">L·ªãch s·ª≠ ƒë∆°n h√†ng</h1>

      {/* --- Khu v·ª±c b·ªô l·ªçc --- */}
      <div className="bg-white p-4 rounded-lg shadow-md mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end">
          <div>
            <label
              htmlFor="search"
              className="block text-sm font-medium text-gray-700"
            >
              T√¨m m√£ ƒë∆°n h√†ng
            </label>
            <input
              type="text"
              id="search"
              name="search"
              value={filters.search}
              onChange={handleFilterChange}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
              placeholder="VD: 435252452"
            />
          </div>
          <div>
            <label
              htmlFor="status"
              className="block text-sm font-medium text-gray-700"
            >
              Tr·∫°ng th√°i
            </label>
            <select
              id="status"
              name="status"
              value={filters.status}
              onChange={handleFilterChange}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="1">Ho√†n th√†nh</option>
              <option value="0">ƒêang x·ª≠ l√Ω</option>
              <option value="2">ƒê√£ h·ªßy</option>
            </select>
          </div>
          <div>
            <label
              htmlFor="startDate"
              className="block text-sm font-medium text-gray-700"
            >
              T·ª´ ng√†y
            </label>
            <input
              type="date"
              id="startDate"
              name="startDate"
              value={filters.startDate}
              onChange={handleFilterChange}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="endDate"
              className="block text-sm font-medium text-gray-700"
            >
              ƒê·∫øn ng√†y
            </label>
            <input
              type="date"
              id="endDate"
              name="endDate"
              value={filters.endDate}
              onChange={handleFilterChange}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>
      </div>

      {/* --- B·∫£ng d·ªØ li·ªáu --- */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                M√£ ƒë∆°n h√†ng
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Ng√†y ƒë·∫∑t
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                T·ªïng ti·ªÅn
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tr·∫°ng th√°i
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                H√†nh ƒë·ªông
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredOrders.length > 0 ? (
              filteredOrders.map((order) => (
                <tr key={order.id}>
                  <td className="px-6 py-4 whitespace-nowrap font-mono text-blue-600">
                    #{order.order_code}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {formatDate(order.created_at)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap font-semibold">
                    {formatCurrency(order.total_amount)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {renderStatus(order.status)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <button
                      onClick={() => handleViewDetails(order)}
                      className="text-indigo-600 hover:text-indigo-900 font-medium"
                    >
                      Xem chi ti·∫øt
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="text-center py-10 text-gray-500">
                  Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ph√π h·ª£p.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* --- Render Modal --- */}
      <OrderDetailModal
        order={selectedOrder}
        onClose={() => setSelectedOrder(null)}
      />
    </div>
  );
}
