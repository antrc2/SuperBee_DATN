import React, { useState, useEffect, useRef } from "react";
import api from "@utils/http"; // Import Axios instance
import { toast } from "react-toastify"; // Example for notifications

export default function Profile() {
  const [isEditing, setIsEditing] = useState(false);
  const [userData, setUserData] = useState({
    username: "hikariuisu", // Will be fetched from API or default
    email: "", // Will be fetched from API
    phone: "", // Will be fetched from API
    avatar: "https://via.placeholder.com/150", // Default or fetched from API
  });
  const [editData, setEditData] = useState({}); // Stores data being edited
  const [avatarFile, setAvatarFile] = useState(null); // To hold the selected avatar file
  const fileInputRef = useRef(null); // Ref for the hidden file input

  // --- API Integration ---
  const fetchUserData = async () => {
    try {
      const response = await api.get("/user/profile");
      const { username, email, phone, avatar } = response.data;
      setUserData({
        username,
        email: email || "",
        phone: phone || "",
        avatar: avatar || "https://via.placeholder.com/150",
      });
      setEditData({
        email: email || "",
        phone: phone || "",
        avatar: avatar || "https://via.placeholder.com/150",
      });
    } catch (error) {
      console.error("Error fetching user data:", error);
      toast.error("Không thể tải thông tin người dùng.");
    }
  };

  const updateUserData = async () => {
    try {
      const formData = new FormData();
      formData.append("email", editData.email);
      formData.append("phone", editData.phone);
      // Only append avatar if a new file was selected
      if (avatarFile) {
        formData.append("avatar", avatarFile); // 'avatar' should match the name Laravel expects
      } else {
        // If no new file, but avatar URL was edited manually, send that.
        // Or if you only allow file uploads, then don't send `editData.avatar` here.
        // For simplicity, we'll send the URL if no new file.
        // Note: Backend should handle if this is a URL or a file upload
        formData.append("avatar_url", editData.avatar); // Use avatar_url for string URL
      }

      // For `multipart/form-data`, you don't set 'Content-Type' header manually.
      // Axios will set it automatically.
      await api.post("/user/profile-update", formData, {
        // Using POST for FormData, Laravel can handle PUT/PATCH with FormData
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      // After successful update, fetch fresh data to ensure consistency,
      // especially if avatar URL is generated by backend after upload.
      await fetchUserData(); // Re-fetch to get potentially new avatar URL
      setIsEditing(false);
      setAvatarFile(null); // Clear selected file
      toast.success("Cập nhật thông tin thành công!");
    } catch (error) {
      console.error("Error updating user data:", error);
      // Handle validation errors from Laravel if any
      if (error.response && error.response.status === 422) {
        const errors = error.response.data.errors;
        for (const key in errors) {
          toast.error(errors[key][0]); // Display first error message for each field
        }
      } else {
        toast.error("Cập nhật thông tin thất bại. Vui lòng thử lại.");
      }
    }
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  // --- Event Handlers ---
  const handleEditClick = () => {
    setIsEditing(true);
    setEditData({ ...userData }); // Copy current data to edit state
    setAvatarFile(null); // Clear any previously selected file
  };

  const handleCancelClick = () => {
    setIsEditing(false);
    setEditData({ ...userData }); // Revert changes
    setAvatarFile(null); // Clear selected file
  };

  const handleSaveClick = () => {
    updateUserData();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleAvatarFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setAvatarFile(file);
      // Create a temporary URL for preview
      setEditData((prevData) => ({
        ...prevData,
        avatar: URL.createObjectURL(file),
      }));
    }
  };

  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="max-w-xl mx-auto p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-3xl font-extrabold text-gray-900 mb-6 text-center">
        Thông tin tài khoản
      </h1>

      <div className="flex flex-col items-center mb-8">
        <div className="relative w-32 h-32 rounded-full overflow-hidden border-4 border-blue-500 shadow-lg group">
          <img
            src={avatarFile ? editData.avatar : userData.avatar}
            alt="Avatar"
            className="w-full h-full object-cover"
          />
          {isEditing && (
            <>
              <div
                className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
                onClick={triggerFileInput}
              >
                <span className="text-white text-sm font-semibold">
                  Đổi ảnh
                </span>
              </div>
              <input
                type="file"
                ref={fileInputRef}
                className="hidden"
                accept="image/*"
                onChange={handleAvatarFileChange}
              />
            </>
          )}
        </div>
      </div>

      <div className="space-y-6">
        {/* Username - Read-only */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Username
          </label>
          <input
            type="text"
            value={userData.username}
            readOnly
            className="mt-1 block w-full bg-gray-100 border border-gray-300 rounded-md shadow-sm py-2 px-3 text-gray-800 cursor-not-allowed sm:text-sm"
          />
        </div>

        {/* Email */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            type="email"
            name="email"
            value={isEditing ? editData.email : userData.email}
            onChange={handleChange}
            readOnly={!isEditing}
            className={`mt-1 block w-full border ${
              isEditing ? "border-blue-400" : "border-gray-300 bg-gray-50"
            } rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
          />
        </div>

        {/* Phone */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Số điện thoại
          </label>
          <input
            type="tel"
            name="phone"
            value={isEditing ? editData.phone : userData.phone}
            onChange={handleChange}
            readOnly={!isEditing}
            className={`mt-1 block w-full border ${
              isEditing ? "border-blue-400" : "border-gray-300 bg-gray-50"
            } rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
          />
        </div>
      </div>

      {/* Edit/Save/Cancel Buttons */}
      <div className="mt-8 flex justify-end space-x-4">
        {isEditing ? (
          <>
            <button
              type="button"
              onClick={handleSaveClick}
              className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded-lg shadow-md transition duration-200"
            >
              Lưu
            </button>
            <button
              type="button"
              onClick={handleCancelClick}
              className="bg-gray-400 hover:bg-gray-500 text-white font-semibold px-6 py-2 rounded-lg shadow-md transition duration-200"
            >
              Hủy
            </button>
          </>
        ) : (
          <button
            type="button"
            onClick={handleEditClick}
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-6 py-2 rounded-lg shadow-md transition duration-200"
          >
            Chỉnh sửa
          </button>
        )}
      </div>
    </div>
  );
}
