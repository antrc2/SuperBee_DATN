import connectionManager from "../models/ConnectionManager.js"; // Import ConnectionManager ƒë·ªÉ qu·∫£n l√Ω c√°c k·∫øt n·ªëi

// H√†m x·ª≠ l√Ω th√¥ng b√°o ƒë·∫øn t·ª´ Redis
// H√†m n√†y nh·∫≠n ƒë·ªëi t∆∞·ª£ng 'io' c·ªßa Socket.IO ƒë·ªÉ c√≥ th·ªÉ g·ª≠i th√¥ng b√°o t·ªõi c√°c client
const handleIncomingNotification = (io) => (channel, message) => {
  try {
    const payload = JSON.parse(message); // Ph√¢n t√≠ch c√∫ ph√°p chu·ªói JSON nh·∫≠n ƒë∆∞·ª£c t·ª´ Redis
    // L·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt t·ª´ payload: lo·∫°i th√¥ng b√°o, d·ªØ li·ªáu, v√† ID ng∆∞·ªùi d√πng
    const { type, data, user_id } = payload; // ƒê√£ b·ªè 'web_id' kh·ªèi ƒë√¢y

    console.log(
      `[Th√¥ng b√°o Redis] Lo·∫°i: ${type}, ID Ng∆∞·ªùi d√πng: ${
        user_id || "Kh√¥ng c√≥ (C√¥ng khai)"
      }`
    );
    // V√≠ d·ª• log: [Th√¥ng b√°o Redis] Lo·∫°i: order_status_updated, ID Ng∆∞·ªùi d√πng: user_123
    // V√≠ d·ª• log: [Th√¥ng b√°o Redis] Lo·∫°i: system_alert, ID Ng∆∞·ªùi d√πng: Kh√¥ng c√≥ (C√¥ng khai)
    io.emit("public_notification", { type, data });
    if (user_id) {
      // N·∫øu payload c√≥ user_id, ƒë√¢y l√† th√¥ng b√°o c√° nh√¢n d√†nh cho m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
      console.log(
        `[Th√¥ng b√°o Redis] ƒêang x·ª≠ l√Ω th√¥ng b√°o c√° nh√¢n cho ng∆∞·ªùi d√πng: ${user_id}`
      );

      // L·∫•y t·∫•t c·∫£ Socket IDs c·ªßa ng∆∞·ªùi d√πng n√†y t·ª´ ConnectionManager
      // (Ng∆∞·ªùi d√πng c√≥ th·ªÉ c√≥ nhi·ªÅu phi√™n k·∫øt n·ªëi tr√™n c√°c thi·∫øt b·ªã/tab kh√°c nhau)
      const socketIds = connectionManager.getSocketIdsByUserId(user_id);
      console.log("üöÄ ~ socketIds:", socketIds); // Ki·ªÉm tra c√°c socket ID t√¨m th·∫•y

      if (socketIds.length > 0) {
        // N·∫øu t√¨m th·∫•y c√°c socket ƒëang ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
        socketIds.forEach((socketId) => {
          // G·ª≠i th√¥ng b√°o 'private_notification' t·ªõi t·ª´ng socket c·ªßa ng∆∞·ªùi d√πng ƒë√≥
          // ƒê√¢y l√† event name m√† client s·∫Ω l·∫Øng nghe
          io.to(socketId).emit("private_notification", { type, data });
        });
        console.log(
          `[Th√¥ng b√°o Redis] ƒê√£ g·ª≠i th√¥ng b√°o ri√™ng t∆∞ t·ªõi T·∫§T C·∫¢ c√°c phi√™n c·ªßa ng∆∞·ªùi d√πng ${user_id}.`
        );
      } else {
        // N·∫øu ng∆∞·ªùi d√πng ƒë√≥ kh√¥ng online (kh√¥ng c√≥ socket n√†o ƒë∆∞·ª£c t√¨m th·∫•y)
        console.log(
          `[Th√¥ng b√°o Redis] Ng∆∞·ªùi d√πng ${user_id} hi·ªán kh√¥ng tr·ª±c tuy·∫øn.`
        );
      }
    } else {
      // N·∫øu payload kh√¥ng c√≥ user_id, ƒë√¢y l√† th√¥ng b√°o chung cho t·∫•t c·∫£ c√°c client ƒëang k·∫øt n·ªëi
      console.log(
        `[Th√¥ng b√°o Redis] ƒêang x·ª≠ l√Ω th√¥ng b√°o chung cho T·∫§T C·∫¢ client.`
      );
      // G·ª≠i th√¥ng b√°o 'public_notification' t·ªõi t·∫•t c·∫£ c√°c client
      io.emit("public_notification", { type, data });
      console.log(
        `[Th√¥ng b√°o Redis] ƒê√£ g·ª≠i th√¥ng b√°o c√¥ng khai: Lo·∫°i "${type}".`
      );
    }
  } catch (error) {
    // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh ph√¢n t√≠ch payload ho·∫∑c x·ª≠ l√Ω
    console.error(
      `[L·ªói X·ª≠ l√Ω Redis] C√≥ l·ªói khi x·ª≠ l√Ω tin nh·∫Øn Redis: ${error.message}`
    );
  }
};

export default handleIncomingNotification; // Xu·∫•t h√†m x·ª≠ l√Ω th√¥ng b√°o ƒë·ªÉ s·ª≠ d·ª•ng trong server.js
