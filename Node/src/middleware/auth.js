// src/middleware/auth.js
import { verifyToken } from "../utils/jwt.js";
import connectionManager from "../models/ConnectionManager.js";
import { v4 as uuidv4 } from "uuid";

const ANONYMOUS_USER_ID_PREFIX = "guest_";

const authSocketMiddleware = (socket, next) => {
  const token = socket.handshake.query.token;
  const guestId = socket.handshake.query.guestId;

  let userId;
  let isLoggedIn = false;
  let userRole = "customer";

  // Ph√¢n t√≠ch:
  // L·∫ßn ƒë·∫ßu k·∫øt n·ªëi: `token` s·∫Ω l√† `undefined` ho·∫∑c `""`, `guestId` s·∫Ω c√≥ gi√° tr·ªã.
  // --> S·∫Ω ch·∫°y v√†o `else if (guestId)`
  // Khi user ƒëƒÉng nh·∫≠p v√† `authenticateSocket` ƒë∆∞·ª£c g·ªçi: `token` s·∫Ω ƒë∆∞·ª£c g·ª≠i qua event 'authenticate',
  // kh√¥ng ph·∫£i qua handshake query n√†y n·ªØa. `authSocketMiddleware` ch·ªâ ch·∫°y 1 l·∫ßn khi k·∫øt n·ªëi.

  if (token) {
    // S·∫Ω KH√îNG ch·∫°y ·ªü k·∫øt n·ªëi ban ƒë·∫ßu sau thay ƒë·ªïi ·ªü client
    const decoded = verifyToken(token);
    console.log("üöÄ ~ authSocketMiddleware ~ decoded:", decoded);
    if (decoded && decoded.user_id) {
      userId = decoded.user_id.toString();
      isLoggedIn = true;
      userRole = decoded.role_ids[0];
      console.log(
        `[Middleware] Socket ${socket.id}: ƒê√£ x√°c th·ª±c b·∫±ng JWT cho ng∆∞·ªùi d√πng ${userId}`
      );
    } else {
      console.warn(
        `[Middleware] Socket ${socket.id}: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Chuy·ªÉn v·ªÅ tr·∫°ng th√°i kh√°ch.`
      );
      userId = `${ANONYMOUS_USER_ID_PREFIX}${guestId || uuidv4()}`;
      isLoggedIn = false;
    }
  } else if (guestId) {
    // S·∫Ω ch·∫°y ·ªü k·∫øt n·ªëi ban ƒë·∫ßu
    userId = `${ANONYMOUS_USER_ID_PREFIX}${guestId}`;
    isLoggedIn = false;
    userRole = "customer";
    console.log(
      `[Middleware] Socket ${socket.id}: ƒê√£ k·∫øt n·ªëi v·ªõi t∆∞ c√°ch kh√°ch, ID: ${userId}`
    );
  } else {
    // Ch·ªâ ch·∫°y n·∫øu kh√¥ng c√≥ c·∫£ token v√† guestId (r·∫•t hi·∫øm)
    userId = `${ANONYMOUS_USER_ID_PREFIX}${uuidv4()}`;
    isLoggedIn = false;
    userRole = "customer";
    console.warn(
      `[Middleware] Socket ${socket.id}: Kh√¥ng c√≥ token ho·∫∑c guestId. ƒê√£ g√°n ID kh√°ch t·∫°m th·ªùi: ${userId}`
    );
  }

  socket.userId = userId;
  socket.isLoggedIn = isLoggedIn;
  socket.isAuthenticated = true; // Lu√¥n l√† true v√¨ socket lu√¥n c√≥ m·ªôt ƒë·ªãnh danh
  socket.userRole = userRole;
  connectionManager.addConnection(socket.userId, socket.id); // Li√™n k·∫øt userId (l√† guestId ban ƒë·∫ßu) v·ªõi socketId
  console.log(
    `[Middleware] K·∫øt n·ªëi Socket ${socket.id} ƒë√£ kh·ªüi t·∫°o: ID Ng∆∞·ªùi d√πng=${socket.userId}, ƒê√£ ƒëƒÉng nh·∫≠p=${socket.isLoggedIn}`
  );

  socket.join("public_notifications");
  console.log(
    `[Middleware] Socket ${socket.id} (User: ${socket.userId}) ƒë√£ t·ª± ƒë·ªông tham gia public_notifications.`
  );

  next();
};

export default authSocketMiddleware;
