import pool from "../../db.js";

/**
 * T√¨m m·ªôt nh√¢n vi√™n ƒëang r·∫£nh r·ªói d·ª±a tr√™n tr·∫°ng th√°i v√† s·ªë l∆∞·ª£ng cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i.
 * @returns {Promise<string|null>} user_id c·ªßa nh√¢n vi√™n ho·∫∑c null.
 */
async function getAvailableAgent() {
  let connection;
  try {
    connection = await pool.getConnection();
    // ∆Øu ti√™n nh√¢n vi√™n c√≥ √≠t cu·ªôc tr√≤ chuy·ªán nh·∫•t ƒë·ªÉ c√¢n b·∫±ng t·∫£i
    const [rows] = await connection.query(
      "SELECT user_id FROM agents WHERE status IN ('available', 'online') ORDER BY current_chats_count ASC LIMIT 1"
    );
    return rows.length > 0 ? rows[0].user_id : null;
  } catch (error) {
    console.error("L·ªói khi l·∫•y nh√¢n vi√™n kh·∫£ d·ª•ng:", error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y nh√¢n vi√™n kh·∫£ d·ª•ng.");
  } finally {
    if (connection) connection.release();
  }
}

/**
 * T√¨m ph√≤ng chat ƒëang m·ªü cho kh√°ch h√†ng, ho·∫∑c t·∫°o m·ªôt ph√≤ng m·ªõi v√† g√°n nh√¢n vi√™n.
 * @param {string} customerId ID c·ªßa kh√°ch h√†ng.
 * @returns {Promise<object>} D·ªØ li·ªáu ph√≤ng chat bao g·ªìm ID ph√≤ng, tin nh·∫Øn, v√† nh√¢n vi√™n ƒë∆∞·ª£c g√°n.
 */
async function findOrCreateChatRoomForCustomer(customerId) {
  let connection;

  try {
    connection = await pool.getConnection();
    await connection.beginTransaction();

    // 1. Ki·ªÉm tra xem kh√°ch h√†ng ƒë√£ c√≥ ph√≤ng chat n√†o ƒëang ho·∫°t ƒë·ªông ch∆∞a
    const [existingRooms] = await connection.query(
      `SELECT cr.id FROM chat_rooms cr
       JOIN chat_room_participants p ON cr.id = p.chat_room_id
       WHERE p.user_id = ? AND p.role = 'customer' AND cr.status IN ('open', 'assigned', 'pending_assignment')
       LIMIT 1`,
      [customerId]
    );
    const [name] = await connection.query(
      `SELECT username from users where id = ? `,
      [customerId]
    );
    console.log(
      "üöÄ ~ findOrCreateChatRoomForCustomer ~ name:",
      name[0].username
    );

    if (existingRooms.length > 0) {
      // 2a. N·∫øu ƒë√£ c√≥, t·∫£i l·∫°i th√¥ng tin ph√≤ng v√† l·ªãch s·ª≠ tin nh·∫Øn
      const roomId = existingRooms[0].id;
      const [messages] = await connection.query(
        "SELECT * FROM messages WHERE chat_room_id = ? ORDER BY created_at ASC",
        [roomId]
      );
      const [agent] = await connection.query(
        "SELECT user_id FROM chat_room_participants WHERE chat_room_id = ? AND role = 'agent'",
        [roomId]
      );

      await connection.commit();
      return {
        roomId,
        messages,
        message: "ƒê√£ t√¨m th·∫•y ph√≤ng chat hi·ªán c√≥.",
        assignedAgentUserId: agent.length > 0 ? agent[0].user_id : null,
      };
    } else {
      // 2b. N·∫øu ch∆∞a c√≥, t·∫°o ph√≤ng chat m·ªõi
      const [newRoomResult] = await connection.query(
        "INSERT INTO chat_rooms (name, status, created_at, updated_at) VALUES (?,'open', NOW(), NOW())",
        [name[0].username]
      );
      const roomId = newRoomResult.insertId;

      // Th√™m kh√°ch h√†ng v√†o ph√≤ng
      await connection.query(
        "INSERT INTO chat_room_participants (chat_room_id, user_id, role) VALUES (?, ?, 'customer')",
        [roomId, customerId]
      );

      // 3. T√¨m v√† g√°n nh√¢n vi√™n
      const assignedAgentUserId = await getAvailableAgent();
      let statusMessage = "ƒê√£ t·∫°o ph√≤ng chat m·ªõi.";

      if (assignedAgentUserId) {
        // G√°n nh√¢n vi√™n v√†o ph√≤ng
        await connection.query(
          "INSERT INTO chat_room_participants (chat_room_id, user_id, role) VALUES (?, ?, 'agent')",
          [roomId, assignedAgentUserId]
        );
        // TƒÉng s·ªë l∆∞·ª£ng chat c·ªßa nh√¢n vi√™n
        await connection.query(
          "UPDATE agents SET current_chats_count = current_chats_count + 1 WHERE user_id = ?",
          [assignedAgentUserId]
        );
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
        await connection.query(
          "UPDATE chat_rooms SET status = 'assigned' WHERE id = ?",
          [roomId]
        );
        statusMessage += ` ƒê√£ g√°n nh√¢n vi√™n ${assignedAgentUserId}.`;
      } else {
        // N·∫øu kh√¥ng c√≥ nh√¢n vi√™n, ƒë∆∞a v√†o h√†ng ch·ªù
        await connection.query(
          "UPDATE chat_rooms SET status = 'pending_assignment' WHERE id = ?",
          [roomId]
        );
        statusMessage += " Kh√¥ng c√≥ nh√¢n vi√™n kh·∫£ d·ª•ng, vui l√≤ng ch·ªù.";
      }
      await connection.commit();
      return {
        roomId,
        messages: [], // Ph√≤ng m·ªõi ch∆∞a c√≥ tin nh·∫Øn
        message: statusMessage,
        assignedAgentUserId,
      };
    }
  } catch (error) {
    if (connection) await connection.rollback();
    console.error("L·ªói trong findOrCreateChatRoomForCustomer:", error);
    throw new Error("Kh√¥ng th·ªÉ qu·∫£n l√Ω ph√≤ng chat.");
  } finally {
    if (connection) connection.release();
  }
}

async function saveMessageToDb(roomId, senderId, content) {
  let connection;
  try {
    connection = await pool.getConnection();
    const [result] = await connection.query(
      "INSERT INTO messages (chat_room_id, sender_id, content, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())",
      [roomId, senderId, content]
    );

    // C·∫≠p nh·∫≠t updated_at c·ªßa ph√≤ng chat ƒë·ªÉ bi·∫øt c√≥ ho·∫°t ƒë·ªông m·ªõi
    await connection.query(
      "UPDATE chat_rooms SET updated_at = NOW() WHERE id = ?",
      [roomId]
    );

    const messageId = result.insertId;

    return {
      id: messageId,
      chat_room_id: roomId,
      sender_id: senderId,
      content: content,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
  } catch (error) {
    console.error("L·ªói khi l∆∞u tin nh·∫Øn v√†o DB:", error);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u tin nh·∫Øn.");
  } finally {
    if (connection) connection.release();
  }
}

// ===============================================================
// PH·∫¶N CODE M·ªöI TH√äM CHO CH·ª®C NƒÇNG ADMIN
// ===============================================================

/**
 * L·∫•y danh s√°ch c√°c cu·ªôc tr√≤ chuy·ªán c·ªßa m·ªôt nh√¢n vi√™n c·ª• th·ªÉ.
 * R·∫•t h·ªØu √≠ch cho trang admin ƒë·ªÉ xem c√¥ng vi·ªác c·ªßa t·ª´ng nh√¢n vi√™n.
 * @param {number | string} agentId ID c·ªßa nh√¢n vi√™n.
 * @returns {Promise<Array<object>>} M·ªôt m·∫£ng c√°c object ch·ª©a th√¥ng tin t√≥m t·∫Øt v·ªÅ m·ªói cu·ªôc tr√≤ chuy·ªán.
 */
async function getChatsByAgent(agentId) {
  let connection;
  try {
    connection = await pool.getConnection();
    // C√¢u l·ªánh SQL n√†y s·∫Ω:
    // 1. T√¨m t·∫•t c·∫£ c√°c `chat_room_id` m√† nh√¢n vi√™n (agent) ƒë√£ tham gia.
    // 2. JOIN v·ªõi b·∫£ng `chat_rooms` ƒë·ªÉ l·∫•y tr·∫°ng th√°i v√† th·ªùi gian t·∫°o ph√≤ng.
    // 3. LEFT JOIN v·ªõi `chat_room_participants` m·ªôt l·∫ßn n·ªØa ƒë·ªÉ t√¨m kh√°ch h√†ng (customer) trong c√πng ph√≤ng chat.
    // 4. D√πng subquery ƒë·ªÉ l·∫•y tin nh·∫Øn cu·ªëi c√πng, gi√∫p admin c√≥ c√°i nh√¨n t·ªïng quan nhanh.
    // 5. S·∫Øp x·∫øp theo th·ªùi gian c·∫≠p nh·∫≠t c·ªßa ph√≤ng chat ƒë·ªÉ cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t n·ªïi l√™n tr√™n.
    const [chats] = await connection.query(
      `
      SELECT
        cr.id AS roomId,
        cr.status,
        cr.created_at AS roomCreatedAt,
        cr.updated_at AS roomUpdatedAt,
        p_customer.user_id AS customerId,
        (SELECT content FROM messages WHERE chat_room_id = cr.id ORDER BY created_at DESC LIMIT 1) AS lastMessage
      FROM
        chat_room_participants AS p_agent
      JOIN
        chat_rooms AS cr ON p_agent.chat_room_id = cr.id
      LEFT JOIN
        chat_room_participants AS p_customer ON cr.id = p_customer.chat_room_id AND p_customer.role = 'customer'
      WHERE
        p_agent.user_id = ? AND p_agent.role = 'agent'
      ORDER BY
        cr.updated_at DESC;
      `,
      [agentId]
    );
    return chats;
  } catch (error) {
    console.error(
      `L·ªói khi l·∫•y danh s√°ch chat cho nh√¢n vi√™n ${agentId}:`,
      error
    );
    throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán.");
  } finally {
    if (connection) connection.release();
  }
}

/**
 * L·∫•y th√¥ng tin chi ti·∫øt v√† to√†n b·ªô tin nh·∫Øn c·ªßa m·ªôt ph√≤ng chat c·ª• th·ªÉ.
 * @param {number} roomId ID c·ªßa ph√≤ng chat.
 * @returns {Promise<object|null>} M·ªôt object ch·ª©a th√¥ng tin chi ti·∫øt ph√≤ng, ng∆∞·ªùi tham gia v√† tin nh·∫Øn, ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
 */
async function getChatDetails(roomId) {
  let connection;
  try {
    connection = await pool.getConnection();

    // 1. L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa ph√≤ng chat
    const [roomRows] = await connection.query(
      "SELECT * FROM chat_rooms WHERE id = ?",
      [roomId]
    );
    if (roomRows.length === 0) {
      return null; // Kh√¥ng t√¨m th·∫•y ph√≤ng chat
    }
    const roomInfo = roomRows[0];

    // 2. L·∫•y danh s√°ch nh·ªØng ng∆∞·ªùi tham gia trong ph√≤ng
    const [participants] = await connection.query(
      "SELECT user_id, role, joined_at FROM chat_room_participants WHERE chat_room_id = ?",
      [roomId]
    );

    // 3. L·∫•y t·∫•t c·∫£ tin nh·∫Øn trong ph√≤ng, s·∫Øp x·∫øp theo th·ªùi gian
    const [messages] = await connection.query(
      "SELECT * FROM messages WHERE chat_room_id = ? ORDER BY created_at ASC",
      [roomId]
    );

    return {
      roomInfo,
      participants,
      messages,
    };
  } catch (error) {
    console.error(`L·ªói khi l·∫•y chi ti·∫øt chat cho ph√≤ng ${roomId}:`, error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt cu·ªôc tr√≤ chuy·ªán.");
  } finally {
    if (connection) connection.release();
  }
}

// Export t·∫•t c·∫£ c√°c h√†m, bao g·ªìm c·∫£ c√°c h√†m m·ªõi
export {
  findOrCreateChatRoomForCustomer,
  getAvailableAgent,
  saveMessageToDb,
  getChatsByAgent,
  getChatDetails,
};
